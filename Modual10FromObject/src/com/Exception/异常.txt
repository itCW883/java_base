异常:(代码出现了不正常的现象)
    throwable[异常和错误的父类]


            error[错误](代码需要重大调整)

            exception[异常](所有异常的父类;)
                        exception和其子类(除runtimeException)可代表编译时异常(代码一写就报红,语法错误除外)
                runtimeException[运行时异常;也是exception的子类]


    异常的作用:
        1:查看bug的关键参考信息
        2:作为方法内部的一个特殊的返回值,一边通知调用者底层的一个执行情况

异常出现的过程:
    出现异常不进行处理,会一直向上throw(默认情况下)[谁调用throw到哪]最终到达虚拟机(jvm)虚拟机会向控制台打印异常信息并终止程序

    创建异常对象:
        关键字:throw(告诉程序员此处存在异常),throws处理异常
            格式:throw new 异常

异常处理的两种方式:
    1:throws:   格式 throws 异常[在方法参数和方法体之间写]
        意义:处理异常(将异常向上throw)
        无脑throws会导致一个功能出现问题;其他功能也不能使用
      多异常处理:
            格式:throws 异常1,异常2...,异常n
        若异常间有子父类继承关系,可以直接写父类异常
        不知道异常之间是否有子父类继承关系可以直接写Exception


    2:try ... catch:
        格式:
              try{
                      可能出现异常的代码
              }catch(异常 自定义的对象名){
                    处理异常的代码(可以直接打印在控制台上)
                    [把异常信息保存到日志文件中]
              }
        try ... catch:出现异常功能间不会相互影响
        若try ... catch为抓到出现的异常;编译时会报错依然交由jvm处理;依然会影响后续代码运行(可以抓父类Exception,但一般使用精准打击)

快捷键:选中有可能出现异常的代码 ctrl+alt+t


        try ... catch 多个异常:
            格式:
                try{
                      可能出现异常的代码
                }
                catch(异常1 自定义的对象名){
                 处理异常的代码(可以直接打印在控制台上)
                 [把异常信息保存到日志文件中]
                 }
                  catch(异常2 自定义的对象名){

                  }
        若catch间有子父类继承关系可以直接catch父类异常,若想子父类异常均catch则需要现catch子类,再catch父类

finally:
   意义:无论是否触发异常都会执行的代码
   特殊情况:如果之前执行了System.exit(0)[代表终止当前正在执行的虚拟机];
   格式:
        finally{        }
   执行顺序: try-->finally-->catch

finally使用场景(需要配合try...catch使用):
             1:关闭资源;
                原因:对象在堆内存中产生,如果不进行释放堆内存会瘫痪;GC用于回收堆内存中的垃圾;
                有些对象GC回收不了;如(连接对象 connect;IO流对象,Socket对象);这些对象需要手动回收;此时需要用到finally
                关闭资源的代码就可以写道finally代码块中

抛异常注意的事项:
        父类throw了异常:子类可以throw也可以不throw异常
        父类没有throw异常:子类重写方法后不能throw异常

throws和try ... catch的使用时机:
        若处理异常后,后续的代码还想继续正常执行:使用try ... catch
        若方法间是递进关系,可以现throws最后需要try ... catch做一个统一的异常处理

        运行时期异常一般不处理
