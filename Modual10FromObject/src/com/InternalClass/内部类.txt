什么时候使用内部类
        当一个事务的内部,还有一部分需要使用一个完整的结构(属性和行为)进行描述,这个内部的完整结果又只为外部事务提供服务.
        例如:人类有心脏;人类需要有自身的属性和行为描述,心脏也需要有特殊的属性和行为描述;心脏就可以定义为内部类

java允许一个类定义在另一个类的内部:
        前者称为内部类
        后者称为外部类
            例:class A  [外部类]{
                class B   [内部类]{

                }
            }
            类B是类A的内部类

成员内部类[静态内部类;非静态内部类]
     静态成员内部类:
            格式:
                public class A{
                        //静态成员内部类
                    static class B{
                    }
                }
                    注意:1:内部类可以定义属性;成员和方法等
                        2:静态内部类可以被final或abstract修饰
                        3:静态内部类不能调用外部类的非静态成员(静态不能直接访问非静态)
                        4:内部类可以被四种权限修饰符修饰

                    静态内部类成员调用格式
                            外部类.内部类 对象名 = new 外部内.内部类();

     非静态成员内部类:
          格式:
                        public class A{
                                //非静态成员内部类
                                //相比与静态内部类定义式只是不加static
                             class B{
                            }
                        }
                            注意:1:内部类可以定义属性;成员和方法等
                                2:静态内部类可以被final或abstract修饰
                                3:静态内部类不能调用外部类的非静态成员(静态不能直接访问非静态)
                                4:内部类可以被四种权限修饰符修饰

                            非静态内部类成员调用格式
                                    外部类.内部类 对象名 = new 外部内().new 内部类();

     外部类成员变量和内部类成员变量以及内部类局部变量重名区分:
                    直接使用变量名:为内部类局部变量
                    this.变量名:为内部类成员变量
                    外部类类名.this.变量名:为外部类成员变量

局部内部类
     可以定义在方法中;构造中,代码块中
     局部内部类成员调用例:
            public class Person {
                public void eat(){
                    class Heart{
                        public void junp(){
                            System.out.println("心脏框框跳");
                        }
                }
                //实例化调用局部内部类
                    Heart heart = new Heart();
                    heart.junp();
                //匿名调用局部内部类
                    System.out.println("+++++++++++");
                    new Heart().junp();
                }
            }
接口作为方法的实参传递或者方法的返回值 :
             //接口作为方法参数,传递实参时传递的是实现类对象
            //接口作为返回值类型实际返回的是实现类对象

     public static void main(String[] args) {
             Methoud(new Mouse());
     // 返回值是什么类型就用什么类型(接口也算类型)接收对象
     // [此处接收方法返回的对象;还是多态形式]

            USB m1=Methoud02();//相当于USB m1 = new Mouse();
                             // 因为返回值是:return new Mouse();
             m1.OPEN();
         }
         //接口作为方法参数,传递实参时传递的是实现类对象
         public static void Methoud(USB usb){//USB usb=new Mouse
             if(usb instanceof Mouse){
                 usb.OPEN();
             }
         }
         //接口作为返回值类型实际返回的是实现类对象
         public static USB Methoud02(){

             /*
             *  Mouse mouse = new Mouse();
             return mouse;
             * */
             //匿名对象返回
             return new Mouse();
         }

抽象类作为方法的实参传递或者方法的返回值
          //抽象类作为方法参数,传递实参时传递的是子类对象
          //抽象类作为返回值类型实际返回的是子类对象

         public static void main(String[] args) {
             Dog dog = new Dog();
             Methoud(dog);
             System.out.println("=============");
             Animal dog2= Methou02d();
             dog2.eat();
         }
         public static void Methoud(Animal animal)
         {
            animal.eat();
                }
         public static Animal Methou02d(){
             /*Dog dog = new Dog();
             return dog;*/
             return new Dog();
         }

普通类作为方法的实参传递或者方法的返回值
          //普通类作为方法参数,传递实参时传递的是对象
          //普通类作为返回值类型返回的是对象
    public static void main(String[] args) {
            Person person = new Person();
            Methoud01(person);
            System.out.println("================");
            Person p2=Methoud02();
            p2.eat();
        }
        public static void Methoud01(Person person){
            person.eat();
        }
        public static Person Methoud02(){
           /* Person person = new Person();
            return person;*/
            return new Person();
        }

//局部内部类的使用
  public static void main(String[] args) {
        USB usb = Method();//USB usb = new Mouse();
        usb.OPEN();
    }
    public static USB Method(){
        //局部内部类
        class Mouse implements USB{

            @Override
            public void OPEN() {
                System.out.println("鼠标打开USB连接电脑");
            }
        }
        return new Mouse();
    }


匿名内部类: [可以显示声明出类名的内部类]

    普通情况调用接口的方法:
        1:创建实现类,实现接口
        2:重写方法
        3:创建实现类对象
        4:调用方法

匿名内部类格式:
    1://[只能调用一个方法]
    new 接口/抽象类(){
            重写的方法
    } .重写的方法
     [new...{...}代表实现类对象]

     //有名对象[取名只是给对象起名]
    2://[可以调用多个方法]
    类型 对象名 = new 接口/抽象类(){
            重写的方法
    }
    对象名.重写的方法

        例:  public static void main(String[] args) {
        //格式一[只能调用一个方法]
                    new USB(){

                        @Override
                        public void OPen() {
                            System.out.println("鼠标连接主机");
                        }

                        @Override
                        public void CLOSE() {

                        }
                    }.OPen();

                    System.out.println("======================");
        //格式二  [可以调用多个方法]
                    USB keyBoard = new USB() {
                        @Override
                        public void OPen() {
                            System.out.println("键盘连接主机");
                        }

                        @Override
                        public void CLOSE() {

                            System.out.println("键盘与主机的连接以断开");
                        }
                    };
                    keyBoard.OPen();
                    keyBoard.CLOSE();
                }

    匿名内部类的使用场景:1:只是需要简单调用一次某个接口/抽象类的方法时[使用匿名内部类格式匿名内部类会自动编译生成]


匿名内部类做参数传递或返回值返回:
        public static void main(String[] args) {
            Method01(new USB() {
                @Override
                public void OPEN() {
                    System.out.println("USB接口打开");
                }

                @Override
                public void CLOSE() {
                    System.out.println("USB接口关闭");
                }
            });
            System.out.println("===================");

            USB usb=Method02();
            usb.CLOSE();
        }
    //匿名内部类做参数传递:
        public static void Method01(USB usb){
            usb.OPEN();
        }
    匿名内部类做返回值返回:
        public static USB Method02(){
            return new USB() {
                @Override
                public void OPEN() {
                    System.out.println("USB接口打开");
                }

                @Override
                public void CLOSE() {
                    System.out.println("USB接口关闭");
                }
            };
        }

