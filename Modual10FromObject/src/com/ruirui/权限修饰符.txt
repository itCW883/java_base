权限修饰符:不同权限修饰符修饰的内容会有不同的权限
    public(公共的;最高权限;谁都可以放问)
    protected(受保护的)
    default(默认的;不写权限修饰符就是默认权限;普通类不能直接写default;接口可以写default)
    private(私有的)

    一个成员被不同权限修饰符修饰时在不同范围的访问情况

                            public              protected           default             private

              同类          可以访问              可以访问              可以访问             可以访问

              同包不同类     可以访问              可以访问              可以访问             不可以访问

              不同包子父类    可以访问             可以访问              不可以访问           不可以访问

              不同包非子父类   可以访问             不可以访问            不可以访问           不可以访问

    编写代码无特殊考虑,修饰符使用建议:
        1:属性:使用private:封装思想
        2:成员方法:使用public:便于调用
        3:构造方法:public:便于实例化对象

final关键字:
    使用:
        1:修饰类
            public final calss 类名(){}
                final修饰的类不可继承
        2:修饰方法
            public final 返回值类型 方法名(){}
                final修饰的方法不可以被重写
                final不能同时和abstract同时使用:因为抽象方法要实现必须重写;final修饰的方法又不允许重写
        3:修饰局部变量
            局部变量有默认值:赋值方式可以是:
                                        final 数据类型 变量名=值
                                        final 数据类型 变量名;     变量名=值
            final 数据类型 变量名=值;
                final修饰的局部变量,只可以赋值一次(一定程度上可以看作常量)
        4:修饰成员变量
            必须在定义变量时进行赋值(因为成员变量有默认值)
            格式:
                final 数据类型 变量名=值;
                    final修饰的局部变量,只可以赋值一次
                    被final修饰的成员变量;不能使用set方法和有参构造(这两个方法属于二次赋值)
        5:修饰对象
                final 数据类型 对象名 = new 对象();
                    final修饰的对象名地址值不变,属性值可以改变;
                    可以通过get,set方法修改属性值



