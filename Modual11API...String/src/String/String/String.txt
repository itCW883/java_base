String:
        特点:1:java程序中的所有字符串字面值(如"abc")都作为此类的实例实现
                    凡是带""都是String的对象
            2:字符串是一个常量,在创建后就不能修好,因为底层被final修饰
            3:String对象可共享:
                例:String s1 = "abc";
                   String s1 = "abc";
                   此处的数据abc就可以共享,不会重新创建一个对象
                证明:
                      String s1="abc";
                      String s2="abc";
                      System.out.println(s1.getClass().getName()+"@"+Integer.toHexString(s1.hashCode()));//java.lang.String@17862
                      System.out.println(s2.getClass().getName()+"@"+Integer.toHexString(s2.hashCode()));//java.lang.String@17862

    String的创建:
            // 1:String();使用无参构造
                    String s1=new String();
                    System.out.println(s1);
            // 2:String(String original);根据字符串创建String对象
                    String s2=new String("abc");
                    System.out.println(s2);
            // 3:String(char[] value);根据char数组创建String对象
                    char[] chars={'a','b','c'};
                    String s3=new String(chars);
                    System.out.println(s3);
            // 4:String(byte[] bytes);通过平台指定的字符集解码指定的byte数组,构造一个新的String
                                平台指操作系统
                                        windows的默认字符集是jbk(一个中文占两个字节)
                                        utf-8一个中文占三个字节
                                        中文对应的字节一般都是负数
                    byte[] bytes={97,98,99};//byte数组是通过utf-8对应的编码,在转换为jbk来确定字符的
                    String s4=new String(bytes);
                    System.out.println(s4);
                    byte[] byte2={-97,-98,-99};//���没有对应的中文
                    String s5=new String(byte2);
                    System.out.println(s5);//如果byte数组没有对应的中文就会出现乱码
                    byte[] byte3={-28,-67,-96};//对应的中文为"你",idea启动时会加一个启动参数,启动参数为-Dfile.encoding=UTF-8
                    String s6=new String(byte3);
                    System.out.println(s6);
            // 5:简化形式String 变量名=值;
                    String s7="abc";
                    System.out.println(s7);

    6:String(char[] value,int offset,int count)将char数组的一部分转换为String对象
                    //value要转为Sting的char数组
                    //offset重数组的那个索引开始转
                    //count转几个
    7:String(byte[] bytes,int offset,int length)将byte数组的一部分转换为String对象
                    //bytes要转String的byte数组
                    //offset重数组的那个索引开始转
                    //length要转多少个

地址是否共享问题:
      String s1="abc";
      String s2="abc";
      String s3=new String("abc");//实例化对象了所有并没有共享s1的地址;但内容是共享s1的
      System.out.println(s1 == s2);//true
      System.out.println(s1 == s3);//false
      System.out.println(s2 == s3);//false


            String s3=new String("abc")//共有两个对象;分别s3和abc
                                        //共创建了一个或两个对象;如果没有提前创建abc就需要创建两个对象(先创建abc),反之只需要创建一个对象



字符串拼接
        1:如果等号右边是字符串直接拼接,不会产生新对象,直接拼接
        2:如果等号右边有变量参与拼接,会产生新对象
               String s1="hello";
                String s2="world";
                String s3="helloworld";
                String s4="hello"+"world";
                String s5=s1+"world";   //会new一个StringBuilder
                String s6=s1+s2;    //会new一个StringBuilder

                System.out.println(s3 == s4);//true
                System.out.println(s3 == s5);//false
                System.out.println(s3 == s6);//false