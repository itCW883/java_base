判断方法:
    equals(返回值类型boolean):
    equalsIgnoreCase(返回值类型boolean):不区分字母的大小写
      例子:  String s1="abc";
            String s2=new String("abc");
            String s3=new String("ABC");
            //equals(返回值类型boolean):
            System.out.println(s1.equals(s2));
            System.out.println(s1.equals(s3));
            //equalsIgnoreCase(返回值类型boolean):不区分字母的大小写
            System.out.println(s1.equalsIgnoreCase(s3));
   预防空指针问题:
      //预防空指针问题;不要用变量.方法,用一个确定的值去.方法
           String s1=null;
           String s2="abc";
           System.out.println(s2.equals(s1));
      //Objects工具类;自带判断两个对象(变量)是否相同,且预防空指针的方法
                public static boolean equals(Object a, Object b) {
                       return (a == b) || (a != null && a.equals(b));
                   }

获取方法:
        String s1="abcdefg";
         //获取字符串长度
         System.out.println(s1.length());//结果为: 7
                     //length()这个length()代了()表示是一个方法;与
                     // 数组中的length不同,数组的length代表的是数组的一个属性
         //字符串拼接返回新串
         System.out.println(s1.concat("哈哈哈"));/结果为: abcdefg哈哈哈
         //根据索引获取对应字符串
         System.out.println(s1.charAt(0));//结果为: a
         //获取指定字符串在大字符串中第一次出现的索引位置
         System.out.println(s1.indexOf("bcd"));//结果为: 1
         //截取字符串,从指定索引开始截取到最后,返回新串
         System.out.println(s1.substring(3));//结果为: defg
         //截取字符串从beginIndex开始,到endIndex结束
         //含头不含尾返回新串
         System.out.println(s1.substring(2, 5));//结果为: cde

字符串转换方法:
          String s="abcdefg";
          //char[] toCharArry-->将字符串转换为char数组
          char[] charArray = s.toCharArray();
          for (int i = 0; i < charArray.length; i++) {
              System.out.printf(charArray[i]+" ");//结果为: a b c d e f g
          }
          System.out.println();
          System.out.println("=================");

          //byte[] getBytes-->将字符串转换为byte数组
          byte[] bytes = s.getBytes();
          for (int i = 0; i < bytes.length; i++) {
              System.out.printf(bytes[i]+" ");//结果为: 97 98 99 100 101 102 103
          }
          System.out.println();
          System.out.println("=================");

          //String replace(CharSequence c1,CharSequence c2)-->替换字符串CharSequence-->String的接口
                  //CharSequence是String实现的一个接口
          System.out.println(s.replace("a", "z"));
          System.out.println();
          System.out.println("=================");

          //byte[] getBytes(String charsetName)-->按照指定编码将字符串转换为byte数组
                  //charsetName编码方式的名字
          byte[] bytes1 = s.getBytes("utf-16");//结果为 -2 -1 0 97 0 98 0 99 0 100 0 101 0 102 0 103
          for (int i = 0; i < bytes1.length; i++) {
              System.out.printf(bytes1[i]+" ");

字符串的分割方法:
          //String[] split(String regex)-->按照指定规则分割字符串
                  //注意String regex(为分割字符串的规则)实际上传输的是正则表达式
                  //符号.在正则表达式中代表任意一个字符
                  String s="abc,txt";
                  String[] split = s.split(",");
                  for (int i = 0; i < split.length; i++) {
                      System.out.println(split[i]);
                  }
                  String s2="haha.hehe";
                  String[] split2 = s2.split("\\.");//按照"."符号切割不了字符串,因为"."代表任意字符
                                                          //需要加转义字符"\\"进行转意才可以
                  for (int i = 0; i < split2.length; i++) {
                      System.out.println(split2[i]);
                  }
              }

字符串的其他方法:

             //boolean contains(String s)//-->判断老串是否包含指定的串
             System.out.println(s1.contains("abc"));//判断s1中是否包含"abc"

             //boolean endWith(String s)//-->判断老串是否可以以指定的串结尾
             System.out.println(s1.endsWith("de"));//判断是否以de结尾

             //boolean starWith(String s)//-->判断老串是否可以以指定的串开头
             System.out.println(s1.startsWith("abc"));//判断s1是否以"abc"开头

             //String toLowerCase()//-->将字母转换为小写
             System.out.println(s1.toLowerCase());//结果为: "abcdefg "

             //String toUperCase()//-->将字母转换为大写
             System.out.println(s1.toUpperCase());//结果为: "ABCDEFG "

             //String trim()//-->去掉字符串两端的空格
             System.out.println(s1.trim());//结果为: "abcdefG"