BigInteger:
       数据上限为:42亿的21亿次方(内存根本扛不住,所有可以默认认为无上限)
       解决的问题:操作数据时可能会遇见比long还大的整型数据(对象),此时就可以用该类型来解决这个问题
       作用:
            处理超大数据(整型)
            使用时需要创建对象
       构造:
            BigInteger(String val[传入的参数格式是数字形式的String])
       方法:
            BigInteger b1 = new BigInteger("1111111111111111111111111111111111111111111111111111111111111111111111");
             BigInteger b2= new BigInteger("22222222222222222222222222222222222222222222222222222222222222222");
             BigInteger b3 = new BigInteger("1111111111111111111111111111111111111111111111111111111111111111111119");

             //BigInteger add(BigInteger val)加 返回值为 (this + val)
             System.out.println(b1.add(b2));
             //BigInteger subtract(BigInteger val)减 返回值为 (this - val)
             System.out.println(b1.subtract(b2));
             //BigInteger multiply(BigInteger val)乘 返回值为 (this * val)
             System.out.println(b1.multiply(b2));
             //BigInteger divide(BigInteger val)除 返回值为 (this / val)
             System.out.println(b1.divide(b2));

             //求绝对值
             BigInteger abs = b1.subtract(b3).abs();
             System.out.println(abs);

             //longValue()
             //将此BigInteger转换为 long 。
             long lg = abs.longValue();
             System.out.println(lg);

             //intValue()
             //将此BigInteger转换为 int 。
             int it = abs.intValue();
             System.out.println(it);