LocalDate:
         是一个不可变的日期时间对象:表示日期:通常视为年\月\日
     获取对象方式:
        //直接创建locldate对象
        //static LocalDate now()
        //从默认时区的系统时钟获取当前日期。
        LocalDate localDate1 = LocalDate.now();
        System.out.println("localDate1 = " + localDate1);

        //创建localdate设置日期(年\月\日)
        //static LocalDate of(int year, Month month, int dayOfMonth)
        //从一年，一个月和一天获得一个 LocalDate的实例。
        LocalDate localDate2 = LocalDate.of(2024, 5, 20);
        System.out.println("localDate2 = " + localDate2);

LocalDateTime:
      //获取对象方式:
            //直接创建LocalDateTime对象
            //static LocalDateTime now()
            //从默认时区的系统时钟获取当前日期。
            java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
            System.out.println("localDateTime1 = " + localDateTime1);


            //创建LocalDateTime设置日期(年\月\日\时\分\秒)
            // LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second)
            //从一年，一个月和一天,一时,一分,一秒获得一个 LocalDateTime的实例。
            java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.of(2024, 4, 1, 3, 2, 1);
            System.out.println("localDateTime2 = " + localDateTime2);


获取对应的日期字段:(适用于LocalDate和LocalDateTime)
    LocalDateTime localDateTime1 = LocalDateTime.now();

        //int getDayOfMonth()
        //获取月中的第几天。
        int dom = localDateTime1.getDayOfMonth();
        System.out.println("dom = " + dom);//dom = 17运行程序当月的第几天

        //DayOfWeek getDayOfWeek()
        //获取星期几字段，这是一个枚举 DayOfWeek 。
        DayOfWeek dayOfWeek = localDateTime1.getDayOfWeek();
        System.out.println("dayOfWeek = " + dayOfWeek);//dayOfWeek = TUESDAY 运行程序当周的第几天

        //int getDayOfYear()
        //获得一年之中的第几天。
        int dayOfYear = localDateTime1.getDayOfYear();
        System.out.println("dayOfYear = " + dayOfYear);//dayOfYear = 261 运行程序当年的第几天

        //Era getEra()
        //获得这个时代适用的时代。

        //long getLong(TemporalField field)
        //从此日期获取指定字段的值为 long 。


        //Month getMonth()
        //使用 Month枚举获取月份字段。
        Month month = localDateTime1.getMonth();
        System.out.println("month = " + month);

        //int getMonthValue()
        //将月份字段从1到12。
        int monthValue = localDateTime1.getMonthValue();
        System.out.println("monthValue = " + monthValue);//monthValue = 9 运行程序当年的第几个月

        //int getYear()
        //获取年份字段。
        int year = localDateTime1.getYear();
        System.out.println("year = " + year);//year = 2024 运行程序的那年

设置对应的日期字段:(适用于LocalDate和LocalDateTime)[with开头]
             LocalDate local1 = LocalDate.now();
        LocalDate local1 = LocalDate.now();
    **注意:LocalDate和LocalDateTime是一个不可变的对象,使用with设置LocalDate和LocalDateTime的相应属性实际上是会产生一个新的对象
            //LocalDate with(TemporalAdjuster adjuster)
            //返回此日期的调整副本。
            //LocalDate with(TemporalField field, long newValue)
            //返回此日期的副本，并将指定的字段设置为新值。
            //LocalDate withDayOfMonth(int dayOfMonth)
            //返回此日期的副本，并更改日期。
                    LocalDate l3 = local1.withDayOfMonth(30);
                    System.out.println("l3.getDayOfMonth() = " + l3.getDayOfMonth());

            //LocalDate withDayOfYear(int dayOfYear)
            //返回此日期的副本，并更改日期。
                    LocalDate l2 = local1.withDayOfYear(365);
                    System.out.println("l2.getYear() = " + l2.getDayOfYear());

            //LocalDate withMonth(int month)
            //返回这个日期的副本，并更改年月日。
                    LocalDate l1 = local1.withMonth(8);
                    System.out.println("l1.getMonthValue() = " + l1.getMonthValue());
                    System.out.println("l1 = " + l1);
                    System.out.println("local1 = " + local1);

            //LocalDate withYear(int year)
            //返回此日期的副本，并更改年份。
                    LocalDate l4 = local1.withYear(2026);
                    System.out.println("l4.getYear() = " + l4.getYear());

            使用with设置属性实际上是产生新对象,且一次只能设置一个属性所以需要递进设置
                 LocalDate l1 = local1.withYear(2026);
                 LocalDate l2 = l1.withMonth(8);
                 LocalDate l3 = l2.withDayOfMonth(30);
            或者使用链式调用:
            LocalDate local = localDate1.withYear(2026).withMonth(11).withDayOfMonth(29);





































































































































































































































































































































