计算日期偏差(简单计算年月日使用):
        period:
        static Period between(LocalDate d1,LocalDate d2):计算两个日期间的差值
                LocalDate localDate1 = LocalDate.of(2027, 8, 15);
                LocalDate localDate2 = LocalDate.of(2022,7,1);
         between方法:
                java.time.Period between = java.time.Period.between(localDate1, localDate2);//后减前
                System.out.println(between.getYears());
                System.out.println(between.getMonths());
                System.out.println(between.getDays());


        Duration(计算精确时间使用):
        static Duration between(Temporal startInsive,Temporal endExclusive)
             between方法:
                LocalDateTime localDateTime1 = LocalDateTime.of(2025, 6, 11, 12, 30, 59);
                LocalDateTime localDateTime2 = LocalDateTime.of(2024, 6, 11, 12, 30, 59);
                java.time.Duration between = java.time.Duration.between(localDateTime1, localDateTime2);//后减前
                System.out.println(between.toDays());
                System.out.println(between.toHours());
                System.out.println(between.toMinutes());
                System.out.println(between.toMillis());

        Temporal是一个接口:
                LocalDate,LocalDateTime
                参数需要传递Temporal的实现类对象
                注意:传递的实现类对象传LocalDateTime
                    因为Duration是计算精确时间的偏差(localdate只算年月日不够精确)

        利用Duration获取相差的时分秒-->to开头
            toDays:获取相差天数
            toHours:获取相差小时
            toMinutes:获取相差分钟
            toMills:获取相差毫秒

DateTimeFormatter:
        1:获取对象指定格式:
        2:方法
            1:String format(TemporalAccessor temporal)
                            TemporalAccessor是一个接口:Temporal是TemporalAccessor的子接口
                                                      LocalDate,LocalDateTime也是TemporalAccessor的实现类对象

                      private static void format() {
                      DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyy-MM-dd HH:mm:ss");
                      LocalDateTime localDateTime1 = LocalDateTime.now();
                      String format = dateTimeFormatter.format(localDateTime1);
                      System.out.println(format);
                  }

            将日期对象按照指定的规则转为String
              使用此格式化程序格式化日期时间对象

            2:TemporalAccessor parse(CharSequence text)
                           CharSequence是String的接口;
            将符合规则的字符串转为日期对象
              完全解析产生时间对象的文本。

                    private static void Parse() {
                            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyy-MM-dd HH:mm:ss");
                            String date1="2015-06-11 11:30:30";
                            java.time.temporal.TemporalAccessor parse = dateTimeFormatter.parse(date1);
                            System.out.println(parse);//结果为:{},ISO resolved to 2015-06-11T11:30:30
                            //若想将对象parse转换为常见的LocalDateTime日期对象;就需要用到LocalDteTime中的静态方法
                                        //static LocalDateTime from(TemporalAccessor temporal)
                                        //从时间对象获取一个 LocalDateTime的实例。
                            LocalDateTime from = LocalDateTime.from(parse);
                            System.out.println(from);
                        }


