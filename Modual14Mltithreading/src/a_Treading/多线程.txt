线程与进程的区别:
        进程:在内存中执行的应用程序;
        线程:进程中最小的执行单元(线程被进程包含);
            作用:负责当前进程中当前程序的运行
                一个进程中最少有一个线程(可以有多个线程)
            一个进程中包含多个线程的程序被称为多线程程序;
            (在cpu和内存之间;为一个打的程序的每一个子功能开辟对应的通道方便cpu去内存提取代码,这个通道就是线程)
        一个功能就需要一个线程

多线程使用场景:
        1:软件中的耗时操作(拷贝大文件,加载大资源,所有聊天软件,所有的后台服务器)

多线程可以提高cpu的利用率


并行:
    在同一时刻有多个指令,在多个cpu上同时运行[cpu是多核多线程]

并发:
    在同一时刻有多个指令在单个cpu上 {交替}  执行


CPU的调度:
        分时调度:
                所有线程轮流使用cpu,且平均分配每个线程占用cpu的时间片
        抢占式调度:
                多个线程轮流抢占cpu使用权;哪个线程先抢到了,哪个cpu先执行,一般都是优先级高的抢到cpu使用权的几率大

java程序是抢占式调度

主线程:
    cpu和内存之间为main方法开辟的通道专为main方法服务的通道就是主线程

开启一个线程就会开启一个栈空间(切记不要死循环开线程)
注意:同一个线程对象不能调用多个start()方法,一个线程对象只开一次线程
    想要在次调用start()方法,就在new一个新的线程对象

