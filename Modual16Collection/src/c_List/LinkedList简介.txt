LinkedList简介
    特点:
        1:元素有序
        2:元素可以重复
        3:有索引(有操作索引的方法)有大量操作首尾元素的方法
        4:线程不安全
        5:底层数据结构为双向链表

        例:
          LinkedList<String> lkList = new LinkedList<>();

          //boolean add(E e)
          //将指定的元素追加到此列表的末尾。
          lkList.add("刘备");
          lkList.add("关羽");
          lkList.add("张飞");
          lkList.add("赵云");
          lkList.add("马超");
          lkList.add("黄忠");
          lkList.add("赵云");
          lkList.add("马超");
          lkList.add("吕布");
          lkList.add("张辽");
          System.out.println(lkList);

          //void addFirst(E e)
          //在该列表开头插入指定的元素。
          lkList.addFirst("曹操");
          System.out.println(lkList);

          //void addLast(E e)
          //将指定的元素追加到此列表的末尾。
          lkList.addLast("张郃");
          System.out.println(lkList);

          //E get(int index)
          //返回此列表中指定位置的元素。
          System.out.println(lkList.get(1));//刘备

          //E getFirst()
          //返回此列表中的第一个元素。
          System.out.println(lkList.getFirst());//曹操

          //E getLast()
          //返回此列表中的最后一个元素。
          System.out.println(lkList.getLast());//张郃

          //E remove()
          //检索并删除此列表的头（第一个元素）。
          System.out.println(lkList.remove());//曹操

          //E remove(int index)
          //删除该列表中指定位置的元素。
          System.out.println(lkList.remove(3));//赵云

          //boolean remove(Object o)
          //从列表中删除指定元素的第一个出现（如果存在）。
          System.out.println(lkList.remove("吕布"));//true

          //E removeFirst()
          //从此列表中删除并返回第一个元素。
          System.out.println(lkList.removeFirst());//刘备

          //boolean removeFirstOccurrence(Object o)
          //删除此列表中指定元素的第一个出现（从头到尾遍历列表时）。
          System.out.println(lkList.removeFirstOccurrence("赵云"));//true

          //E removeLast()
          //从此列表中删除并返回最后一个元素。
          System.out.println(lkList.removeLast());//张郃

          //boolean removeLastOccurrence(Object o)
          //删除此列表中指定元素的最后一次出现（从头到尾遍历列表时）。
          System.out.println(lkList.removeLastOccurrence("马超"));//true
          System.out.println(lkList);

          //LinkedLis的遍历

          Iterator<String> iterator = lkList.iterator();
          while (iterator.hasNext()){//判断下一个是否有值
              System.out.println(iterator.next());//获取下一个值
          }
          System.out.println("============================================");
          for (int i = 0; i < lkList.size(); i++) {
              System.out.println(lkList.get(i));//根据索引拿元素
              //底层是从链表里面拿数据
          }

                lkList.add("张辽");
                System.out.println(lkList);


               //E pop()
                //从此列表表示的堆栈中弹出一个元素。其实就是删除第一个元素
                lkList.pop();
                //底层源码
                // public E pop() {
                //        return removeFirst();
                //    }
                System.out.println(lkList);//弹栈
        //对应栈的特点:后进先出
                //void push(E e)
                //将元素推送到由此列表表示的堆栈上。其实添加第一个元素
                lkList.push("哈哈哈哈");
                //底层源码
                //public void push(E e) {
                //      addFirst(e);
                //    }
                System.out.println(lkList);//压栈