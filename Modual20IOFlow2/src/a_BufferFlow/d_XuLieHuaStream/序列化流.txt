序列化流:
    作用:读写对象

注意:将一个对象实现一个序列化接口;将来才能把这个对象变为二进制在网络中传输
应用场景:玩游戏时存档与读档

    序列化流的两个对象:
        1:ObjectOutputStream:
            序列化流:写对象(将携带数据的对象放入文件中(在文件中看不懂;使用时通过反序列化进行读对象))
            构造方法:
                  ObjectOutputStream(OutputStream out)
                  创建一个写入指定的OutputStream的ObjectOutputStream。
            方法:
                void writeObject(Object obj)
                将指定的对象写入ObjectOutputStream。
            例:
                public class texPerson implements Serializable
                    //必须要实现Serializable接口才能被序列化
                {
                    private String name;
                    private Integer age;
                    ....
                    }

                public static void main(String[] args) throws IOException {

                        writer();
                    }
                //NotSerializableException被序列化的对象需要实现这个接口Serializable
                    private static void writer() throws IOException {
                        ObjectOutputStream oos = new ObjectOutputStream
                                (new FileOutputStream("Modual20IOFlow2\\src\\a_BufferFlow\\d_XuLieHuaStream\\person.txt"));
                        texPerson maga = new texPerson("马哥", 100);
                        oos.writeObject(maga);
                        oos.close();

                    }


注意:想要将对象序列化到文件中不能随便序列化
        2:ObjectInputStream:
            反序列化流:读对象
            构造方法:
                ObjectInputStream(InputStream in)
                创建从指定的InputStream读取的ObjectInputStream。
            方法:
                Object readObject()
                从ObjectInputStream读取一个对象。
            例:
                 public class texPerson implements Serializable
                                    //必须要实现Serializable接口才能被序列化
                                {
                                    private String name;
                                    private Integer age;
                                    ....
                                    }

                 private static void readr() throws IOException, ClassNotFoundException {
                        ObjectInputStream ois = new ObjectInputStream
                                (new FileInputStream("Modual20IOFlow2\\src\\a_BufferFlow\\d_XuLieHuaStream\\person.txt"));
                        Object o = ois.readObject();//读取的数据可以强转为对应的类型
                        texPerson p = (texPerson) o;
                        System.out.println(o.toString());
                    }


注意:若不想被序列化给对应的属性/方法,使用关键字transient就可以不被序列化