正则表达式:
    正则表达式是一个具有特殊规则的字符串
    作用:
        用作校验信息(校验格式是否正确)

    String中校验正则的方法:
        boolean matches(String regex)
        校验字符串是否符合regex规则
        告诉这个字符串是否匹配给定的 regular expression 。

split 和 replaceAll 也可以使用正则表达式
    例子:
       String s1="abc hehe hahaha";
       String[] arr1 = s1.split(" +");//+号代表多个
       System.out.println("Arrays.toString(arr1) = " + Arrays.toString(arr1));
       String s2 = s1.replaceAll(" +", "fu ");


不同类型的正则表达式:
    字符类:
        语法示例:
            1.[abc]代表a或者b或者c中的一个
            2:[^abc]代表非除abc外的任意字符\
            3.[a-z]代表小写a-z中的任意一个字符
            4.[A-Z]代表大写A-Z中的任意一个字符
            5.[0-9]代表0-9之间的某一个数字字符
            6.[a-zA-Z0-9]代表小写a-z中或大写A-Z中或0-9之间的任意一个数字字符
            7:[a-dm-p]:代表a-d或m-p之间的任意一个字符
            例子:
                 //1:验证字符串是否以h开头e结尾中间是aeiou
                 boolean result01 = "hyd".matches("[h][aeiou][d]");
                 System.out.println("result01 = " + result01);
                 //2:验证字符串是否以h开头d结尾中间不是aeiou
                 boolean result02 = "hyd".matches("[h][^aeiou][d]");
                 System.out.println("result02 = " + result02);
                 //3:验证字符串是否以小写a-z开头ad结尾
                 boolean result03 = "had".matches("[a-z][a][d]");
                 System.out.println("result03 = " + result03);

    逻辑运算符:
        语法示例:
            1:&&并且
            2:| 或者

            例子:
                //1:要求字符串是小写字母开头;并且字母不能是[aeiou]开头,后面以ad结尾
                boolean result04 = "yad".matches("[[a-z]&&[^aeiou]][a][d]");
                System.out.println("result04 = " + result04);
                //2:要求字符是aeiou开头,后面以ad结尾/|或的用法
                boolean result05 = "had".matches("[[a]|[e]|[i]|[o]|[u]][a][d]");
                System.out.println("result05 = " + result05);

    预定义字符:
        语法示例:
            1:".":匹配任意字符:(重点) 不能加[]
            2:"\\d":任意数字[0-9]的简写:重点
            3:"\\D":代表非数字的简写[^0-9]的简写:重点
            4:"\\s":空白字符:[\t\n\x08\f\r]的简写
            5:"\\S":非空白字符:[^\\s]的简写
            6:"\\w":单词字符:[a-zA-Z0-9_]的简写(重点)
            7:"\\W":非单词字符:[^\w][^a-zA-Z0-9]_的简写(重点)
        例子:
            boolean result06 = "111".matches("\\d\\d\\d");
            System.out.println("result06 = " + result06);
            //2:验证手机号1开头第二位为3/5/8剩下的为0-9的数字
            boolean result07 = "13838381438".matches("[1][358]\\d\\d\\d\\d\\d\\d\\d\\d\\d");
            System.out.println("result07 = " + result07);
            //3:验证字符串是否以h开头d结尾中间是任意字符
            boolean result08 = "h6d".matches("[h].[d]");
            System.out.println("result08 = " + result08);

    数量词:
        语法提示(x代表字符):
             1:x?:x出现的次数为0次或1次
             2:x*:x出现的次数为0次或多次
             3:x+:x出现的次数为1次或多次 x>=1
             4:x{n}:x出现的次数为恰好n次
             5:x{n,}x出现的此数为至少n次 x>=n次 例:x{3,}
             6:x{n,m}:x出现的次数为n次到m次(n和m都是包含的)n<=x<=m

             例子:
                 //1.验证字符串是否为三位数
                 boolean result09 = "1111".matches("\\d{3}");
                 System.out.println("result09 = " + result09);
                 //2:验证手机号1开头第二位为3/5/8剩下的为0-9的数字
                 boolean result10 = "13838381438".matches("[1][358]\\d[9]");
                 System.out.println("result10 = " + result10);
                 //3:验证QQ号不能是0开头,且全为数字,长度为5--15
                 boolean result11 = "123456789000".matches("[1-9]\\d{0,14}");
                 System.out.println("result11 = " + result11);

    分组括号:
        正则表达式-分组括号():例(abc)括号中的元素缺一不可;且顺序也需要相同
        例子:
            //校验BC的可以出现任意次
            boolean result12 = "ABC的2345BC的".matches("[\\d](BC的)");
            System.out.println("result12 = " + result12);


split 和 replaceAll 也可以使用正则表达式
