Lambda表达式:
    面向对象思想:
        强调的是找对象;通过对象来做事情

    JDK8新思想:函数式编程思想:
        在面向对象的思想上演化出的思想;不再强调找对象(过程);而是强调结果
        函数式编程思想会省略new对象;只关注具体怎么实现

Lambda表达式就是函数式编程思想的产物:
    定义格式:(定义格式会与之前的习惯不同)
            ()->{}
            各部分代表的意思:
                ():代表重写方法的参数位置
                ->:将参数传递到方法中
                {}:重写方法的方法体

        例子与对比:
            //匿名内部类
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        System.out.println("我开始执行啦");
                    }
                }).start();

            //Lambda表达式;可读性会变差
                new Thread(()->
                        System.out.println("我开始执行啦")
                 ).start();

Lambda表达式的使用前提:
    必须是函数式接口做方法参数传递
        函数接口:有且只有一个抽象方法的接口(可以包含其他的方法;但是一定注意只有一个抽象方法)
        检查注解@FunctionIterface
        例子:
            @FunctionalInterface
            public interface Runnable {
                /**
                 * Runs this operation.
                 */
                void run();
            }
学习口诀(先观察后改造):
    1:先观察接口是否是函数式接口做方法传递
    2:如果是可以考虑使用Lambda表达式
    3:调用方法,别直接传对象;以匿名内部类的形式传递实参
    4:从new接口开始到重写的方法的方法名结束,选中;删除(别忘记散出后半个括号)
    5:在重写方法的参数后面;方法体的前面加上->;自此Lambda表达式改造完成

    匿名内部类改写lambda的省略规则:
        重写方法的参数类型可以省略
        若只有一个参数参数也可以省略
        若方法体只有一条语句可以省略 所在方法体的{} 和 ; 和带return可以去掉return