JDK8以后的新特性:
    1:接口中的私有方法
        /**jdk8以前接口是不能定义私有方法的
         * 私有方法外界不能调用;只能在内部调用*/
        /**
         * 私有方法使用场景:
         *      因为有默认方法和静态方法这样具有具体实现的方法;那么可能会出现多个方法有共同的代码可以抽取,
         *      这些共同的代码抽取出来又只希望接口内部使用;所以就增加了私有方法
         * */
         例子:
            public interface USB {
                private void open(){
                    System.out.println("USB接口私有非静态方法");
                };
                private static void close(){
                    System.out.println("USB接口私有静态方法");
                }
                //定义一个默认方法来对私有方法进行调用
                public default void methoddef(){
                    open();
                    close();
                }
            }

    2:钻石(泛型)操作符与匿名内部类相结合
        使用匿名内部类时可以省略<>中的泛型类型
        例子:
            Collections.sort(list, new Comparator<>() {
                  @Override
                  public int compare(b_Person o1, b_Person o2) {
                      return o2.getAge()-o1.getAge();
                  }
              });

    3:try..catch升级
        JDK7时可以在try里面newIO流对象,可以new多个IO流对象(会有代码冗余感觉)
        JDK9:升级为在try的小括号()中传入IO流对象名;IO流对象就可以不在try()里面进行实例化
        /**
         * JDK9开始为减轻try的压力;可以将IO流读对象放到try外进行实例化
         * 依然可以刷新和自动关流
         * 目的:
         *      1:减轻try的压力
         *      2:自动刷新和关流
         *  缺点:
         *      实例化时会出现异常*/
        例子:
            private static void method02() throws IOException {
                FileWriter fw = new FileWriter("Modual22NewJDKcareicter\\src\\nextJDK8\\test.txt",true);
                try(fw){
                    fw.write("/n我是jdk9的新特性");
                }
                catch (Exception e){
                    e.printStackTrace();
                }
            }

    4:局部变量的类型自动推断:
        定义局部变量是不用先确定类型了;用var代替表示
        var 变量名=值;

        例子:
            //初学时定义变量
            int a=111;
            String s1="马哥和瘦皮猴的爱恨情仇";
            //JDK新特性定义变量
            var b=222;
            var s2="黑娃与马哥相爱相杀";

    5:switch
        jdk12例子:
               private static void method01() {
                   Scanner scanner = new Scanner(System.in);
                   var month =scanner.nextInt();
                   /**
                    * 这种形式break不写;依然会出现case穿透性
                    * */
                   switch (month){
                       case 12,1,2:
                           System.out.println("现在是冬天");
                           break;
                       case 3,4,5:
                           System.out.println("现在是春天");
                           break;
                       case 6,7,8:
                           System.out.println("现在是夏天");
                           break;
                       case 9,10,11:
                           System.out.println("现在是秋天");
                           break;
                       default:
                           System.out.println("输入错误,你过的是外星季节吧");
                   }
           }
优化case穿透性问题:
            private static void method02() {
                Scanner scanner = new Scanner(System.in);
                var month =scanner.nextInt();
                /**
                 * 解决case穿透性将:替换为->
                 * */
                switch (month) {
                    case 12, 1, 2->
                        System.out.println("现在是冬天");
                    case 3, 4, 5->
                        System.out.println("现在是春天");
                    case 6, 7, 8->
                        System.out.println("现在是夏天");
                    case 9, 10, 11->
                        System.out.println("现在是秋天");
                    default->
                        System.out.println("输入错误,你过的是外星季节吧");
                }
            }

    JDK13switch语句
        jdk13提出了第二个switch语句的表达预览,引入了yield语句,用于返回值;
        意味着,switch表达式(返回值)应该使用yeild语句,switch语句(不返回值)应该使用bresk语句
        例子:
             var season = switch (month) {
                 case 12, 1, 2->
                 {
                     yield"冬季";
                 }
                 case 3, 4, 5->
                 {
                     yield"春季";
                 }
                 case 6, 7, 8->
                 {
                     yield"夏季";
                 }
                 case 9, 10, 11->
                 {
                     yield"球季";
                 }
                 default->
                 {
                     yield"输入错误,你过的是外星季节吧";
                 }
             };
             System.out.println(season);

    6:文本块:"""" """
        一些特殊格式的文本;比如html的标签对文本;想在java中保持原格式输出;需要加换行符;会将代码可读性变差
        使用文本块就可以避免代码可读性变差的问题e_test06
        例子:
            //不使用文本块的写法
            ar s1 = "<body>\n" +
                   "    <iframe src=\"./html/login.html\" id=\"iframepage\" scrolling=\"no\" onload=\"changeFrameHeight()\" frameborder=\"0\"\n" +
                   "        style=\"width:100%\" marginwidth=\"0\" marginheight=\"0\"></iframe>\n" +
                   "    <script src=\"js/jquery-2.1.1.min.js\" type=\"text/javascript\"></script>\n" +
                   "    <script src=\"js/jquery-1.8.4.min.js\" type=\"text/javascript\"></script>\n" +
                   "</body>";
             //使用文本块的写法
             //使用文本块是"""换行 """三引号对间必须换行
             //三引号中可以加("")双引号
             var s2= """
                     <body>
                         <iframe src="./html/login.html" id="iframepage" scrolling="no" onload="changeFrameHeight()" frameborder="0"
                             style="width:100%" marginwidth="0" marginheight="0"></iframe>
                         <script src="js/jquery-2.1.1.min.js" type="text/javascript"></script>
                         <script src="js/jquery-1.8.4.min.js" type="text/javascript"></script>
                     </body>
                     """;
             System.out.println("s1 = " + s1);
             System.out.println("s2 = " + s2);

    7:instanceof 模式匹配
            JDK16后instanceof自带强转功能
            例子:
            //JDK16后instanceof的新特性
              private static void methodA2(g_Aimal aimal) {
                  if(aimal instanceof g_dog dog){
                      dog.eat();
                      dog.lookdoor();
                  }
              }
                //JDK16前的instanceof
                    private static void methodA(g_Aimal aimal) {
                        if(aimal instanceof g_dog){
                            g_dog dog=(g_dog) aimal;
                            dog.eat();
                            dog.lookdoor();
                        }
                    }


    8:Record类
        record类本质上是一个final类;且是一个全新的类型;同时全部数据都被final修饰;
        会自动编译出get,hashcode,比较所有属性值的equals,tostring等方法,减少了代码的编写量;
        使用record方法可以更方便的创建一个常量类;

        注意:
            1:recode只会有一个全参构造
            2:重写的equals方法比较所有属性
            3:可以在recode声明的类中定义静态字段,静态方法,或实例方法(非静态成员方法)
            4:不能在recode声明的类中定义实例化字段(非静态成员变量)
            5:类不能声明abstract
            6:不能显示的声明父类,默认的父类是java.lang.Record类
            7:因为Record类是一个final类;所有也没有子类


    9:密封类:
        本质就是final修饰类;该类不允许被继承;用于限制超类的使用;密封的类和接口限制其他可能继承或实现它们的其他类或接口
        指定继承人;其他人不能继承或实现

      注意:
        1:密封类用sealed的修饰符描述
        2:使用permits关键字来指定可以继承或实现该类的类型有哪些
        3:一个类继承密封类或实现密封接口,该类必须是sealed,non-sealed,final修饰的
        4:sealed修饰的类或接口必须有子类或实现类