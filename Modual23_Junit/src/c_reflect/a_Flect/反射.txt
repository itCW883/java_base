反射:
将类的组成部分 封装成其他对象;这个过程就称之为反射机制

java代码在计算机中经历的阶段
        1:源代码阶段(代码尚未进入内存;还在硬盘上):
              定义类文件;编译类文件(javac);生成字节码文件(主要包括: 1:成员变量     2:构造方法   3:成员方法)

        2:class类对象阶段
               类加载器(classloader)
              字节码文件共同属性(成员变量[Filed];构造方法[Construct];成员方法[Method];三个属性就是class类对象)

        3:运行时阶段

反射的优势:
    1:可以在程序运行的过程中操作对象
    2:可以解耦(减少程序的耦合性);提高程序的可扩展性


    class对象:
        类的加载最后;jvm会在将加载到内存中的class文件创建一个对应的对象;这个对象就是class对象
        有对象必然有类;描述class对象的类就是class类

        成员变量的对象->field对象->描述Filed对象的类叫Filed类
        成员方法的对象->Method对象->描述Method对象的类叫Method类
        构造方法的对象->Constructor对象->描述Constructor对象的类叫Constructor类


反射
    概述:
        反射就是解剖class文件的技术
    解剖的成员:
        1:解剖出成员变量:赋值
        2:解剖出成员方法:调用
        3:解剖出构造方法:new实例化
        反射的好处所有代码都没写死;让代码更加通用灵活(动态解析)

获取class对象:
    方式1:调用Object中的getClass方法
        class<?> getClass()
        返回此 Object的运行时类。
        对象.getClass

    方式2:无论基本类型还是引用类型;jvm虚拟机都为它们提供了一个静态成员:class
            类名.class

    方式3:Class类中的静态方法
        static Class<?> forName(String className)
        返回与给定字符串名称的类或接口相关联的 类对象。
            参数传入的是:(className)类的全限定名(包名.类名)
        static Class<?> forName(String name, boolean initialize, ClassLoader loader)
        使用给定的类加载器返回与给定字符串名称的类或接口相关联的 类对象。
        Class.forName(类的全限定名)


    例子:
        import lombok.AllArgsConstructor;
        import lombok.Data;
        import lombok.NoArgsConstructor;

        @Data
        @AllArgsConstructor
        @NoArgsConstructor
        public class a_Person {
            private String name;
            private Integer age;

            private a_Person(String name) {
                this.name = name;
            }
        }

                System.out.println("============获取class对象的方式一==============");
                /**
                 * 方式1:调用Object中的getClass方法
                 *     Class<?> getClass()
                 *     返回此 Object的运行时类。*/
                a_Person people = new a_Person();
                Class<? extends a_Person> aClass1 = people.getClass();
                System.out.println("aClass1 = " + aClass1);
                System.out.println("============获取class对象的方式二==============");
                /**
                 * 基本类型还是引用类型;jvm虚拟机都为它们提供了一个静态成员:class*/
                Class<a_Person> class2 = a_Person.class;
                System.out.println("class2 = " + class2);
                System.out.println("============获取class对象的方式三==============");
                /**
                 *Class类中的静态方法
                 *         static Class<?> forName(String className)
                 *         返回与给定字符串名称的类或接口相关联的 类对象。*/
                Class<?> aClass3 = Class.forName("c_reflect.a_Person");
                System.out.println("aClass3 = " + aClass3);
                /**
                 * 写类的全限定名技巧:
                 * 1:直接复制类的路径
                 * 2:直接类名+回车
                 * 检查:
                 *  ctr+鼠标左键点击类名;可以跳转到对应的类;就表示全限定名写成功啦
                 * */
                System.out.println( (aClass1 == aClass3));// true
                /**类加载器只会加载一个class对象*/
            }